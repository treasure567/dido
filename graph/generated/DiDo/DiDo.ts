// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Donate extends ethereum.Event {
  get params(): Donate__Params {
    return new Donate__Params(this);
  }
}

export class Donate__Params {
  _event: Donate;

  constructor(event: Donate) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DiDo__donationsResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: string;
  value4: string;
  value5: string;
  value6: string;
  value7: string;
  value8: string;
  value9: BigInt;
  value10: BigInt;
  value11: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: string,
    value3: string,
    value4: string,
    value5: string,
    value6: string,
    value7: string,
    value8: string,
    value9: BigInt,
    value10: BigInt,
    value11: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getRecipient(): Address {
    return this.value1;
  }

  getFullname(): string {
    return this.value2;
  }

  getContact(): string {
    return this.value3;
  }

  getEmail(): string {
    return this.value4;
  }

  getTitle(): string {
    return this.value5;
  }

  getDescription(): string {
    return this.value6;
  }

  getLinks(): string {
    return this.value7;
  }

  getImagesUrl(): string {
    return this.value8;
  }

  getTarget(): BigInt {
    return this.value9;
  }

  getRaised(): BigInt {
    return this.value10;
  }

  getCompleted(): boolean {
    return this.value11;
  }
}

export class DiDo extends ethereum.SmartContract {
  static bind(address: Address): DiDo {
    return new DiDo("DiDo", address);
  }

  donated(param0: Address): BigInt {
    let result = super.call("donated", "donated(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_donated(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("donated", "donated(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  donations(param0: BigInt): DiDo__donationsResult {
    let result = super.call(
      "donations",
      "donations(uint256):(uint256,address,string,string,string,string,string,string,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new DiDo__donationsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toString(),
      result[6].toString(),
      result[7].toString(),
      result[8].toString(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBoolean(),
    );
  }

  try_donations(param0: BigInt): ethereum.CallResult<DiDo__donationsResult> {
    let result = super.tryCall(
      "donations",
      "donations(uint256):(uint256,address,string,string,string,string,string,string,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DiDo__donationsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toString(),
        value[6].toString(),
        value[7].toString(),
        value[8].toString(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBoolean(),
      ),
    );
  }

  donationsCount(): BigInt {
    let result = super.call("donationsCount", "donationsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_donationsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "donationsCount",
      "donationsCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eachDonated(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "eachDonated",
      "eachDonated(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_eachDonated(
    param0: BigInt,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "eachDonated",
      "eachDonated(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eachTopDonor(param0: BigInt): Address {
    let result = super.call("eachTopDonor", "eachTopDonor(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_eachTopDonor(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eachTopDonor",
      "eachTopDonor(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eachTopDonorAmount(param0: BigInt): BigInt {
    let result = super.call(
      "eachTopDonorAmount",
      "eachTopDonorAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_eachTopDonorAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "eachTopDonorAmount",
      "eachTopDonorAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  topDonor(): Address {
    let result = super.call("topDonor", "topDonor():(address)", []);

    return result[0].toAddress();
  }

  try_topDonor(): ethereum.CallResult<Address> {
    let result = super.tryCall("topDonor", "topDonor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  topDonorAmount(): BigInt {
    let result = super.call("topDonorAmount", "topDonorAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_topDonorAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "topDonorAmount",
      "topDonorAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveRequestEthCall extends ethereum.Call {
  get inputs(): ApproveRequestEthCall__Inputs {
    return new ApproveRequestEthCall__Inputs(this);
  }

  get outputs(): ApproveRequestEthCall__Outputs {
    return new ApproveRequestEthCall__Outputs(this);
  }
}

export class ApproveRequestEthCall__Inputs {
  _call: ApproveRequestEthCall;

  constructor(call: ApproveRequestEthCall) {
    this._call = call;
  }

  get _recipientAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveRequestEthCall__Outputs {
  _call: ApproveRequestEthCall;

  constructor(call: ApproveRequestEthCall) {
    this._call = call;
  }
}

export class DonateAddressCall extends ethereum.Call {
  get inputs(): DonateAddressCall__Inputs {
    return new DonateAddressCall__Inputs(this);
  }

  get outputs(): DonateAddressCall__Outputs {
    return new DonateAddressCall__Outputs(this);
  }
}

export class DonateAddressCall__Inputs {
  _call: DonateAddressCall;

  constructor(call: DonateAddressCall) {
    this._call = call;
  }

  get _donationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get realMoney(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DonateAddressCall__Outputs {
  _call: DonateAddressCall;

  constructor(call: DonateAddressCall) {
    this._call = call;
  }
}

export class GeneralDonateCall extends ethereum.Call {
  get inputs(): GeneralDonateCall__Inputs {
    return new GeneralDonateCall__Inputs(this);
  }

  get outputs(): GeneralDonateCall__Outputs {
    return new GeneralDonateCall__Outputs(this);
  }
}

export class GeneralDonateCall__Inputs {
  _call: GeneralDonateCall;

  constructor(call: GeneralDonateCall) {
    this._call = call;
  }
}

export class GeneralDonateCall__Outputs {
  _call: GeneralDonateCall;

  constructor(call: GeneralDonateCall) {
    this._call = call;
  }
}

export class PostDonationCall extends ethereum.Call {
  get inputs(): PostDonationCall__Inputs {
    return new PostDonationCall__Inputs(this);
  }

  get outputs(): PostDonationCall__Outputs {
    return new PostDonationCall__Outputs(this);
  }
}

export class PostDonationCall__Inputs {
  _call: PostDonationCall;

  constructor(call: PostDonationCall) {
    this._call = call;
  }

  get _fullname(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _contact(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _email(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _title(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _links(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _imagesUrl(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _target(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _raised(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class PostDonationCall__Outputs {
  _call: PostDonationCall;

  constructor(call: PostDonationCall) {
    this._call = call;
  }
}
